{
  "name": "Fall2016-project-hils124",
  "tagline": "fall2016-project-hils124 created by GitHub Classroom",
  "body": "# Abandoned\r\n#### A text-based mystery game\r\nPlayers find themselves trapped in a house and have to collect and use items in order to find a way out.\r\n\r\n*Hilary Schulz*\r\n<hr>\r\n![](https://github.com/cpe305/fall2016-project-hils124/blob/master/Docs/AbandonedGamePlay2.png?raw=true)\r\n<hr>\r\n## Setup\r\n\r\nClone source code to your machine on your terminal. <br>\r\n&nbsp;&nbsp;Run: <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;```mvn clean install```<br>\r\n&nbsp;&nbsp;To Play Game: <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;```mvn exec:java```\r\n<hr>\r\n## How to Play\r\nThis game is a terminal application and is completely text-based. Players move around, inspect objects and collect items by typing commands into the terminal.\r\n\r\n### Player Commands\r\n<ul>\r\n  <li>describe wall</li>\r\n  <li>enter [PORTAL]</li>\r\n  <li>inspect [ELEMENT]</li>\r\n  <li>take [ITEM]</li>\r\n  <li>turn [LEFT, RIGHT, AROUND]</li>\r\n  <li>use [ITEM]</li>\r\n  <li>view inventory</li>\r\n  <li>quit</li>\r\n</ul>\r\n![](https://raw.githubusercontent.com/cpe305/fall2016-project-hils124/master/Docs/AbandonedGamePlay1.png)\r\n\r\n<hr>\r\n\r\n## Design Layout\r\n\r\n### Floor Plan\r\n![](https://raw.githubusercontent.com/cpe305/fall2016-project-hils124/master/Docs/FloorPlanAbandoned.png)\r\n\r\n### Software Architecture\r\n![](https://raw.githubusercontent.com/cpe305/fall2016-project-hils124/master/Docs/architectdesign.png)\r\n\r\n#### Presentation Layer\r\nUser interaction with the terminal.\r\nUsers type commands directly in the command prompt and visually see the narration of the game.\r\n\r\n#### Business Logic Layer\r\nHandles business logic of the application.\r\nIncludes item actions and player commands\r\n<ul>\r\n  <li><em>EntityUseType.java</em></li>\r\n  <li><em>CommandProcessor.java</em></li>\r\n</ul>\r\n\r\n#### Data Layer\r\nHandles saving and loading of the game into files.\r\nRelated Classes:\r\n<ul>\r\n  <li><em>GameSaver.java</em></li>\r\n  <li><em>GameLoader.java</em></li>\r\n</ul>\r\n\r\nFiles:\r\n  <li><em>HouseData.json</em></li>\r\n  <li><em>saveHouse.json</em></li>\r\n  <li><em>savePlayer.json</em></li>\r\n</ul>\r\n\r\n## Source Code Documentation\r\n### abandoned.house\r\nPackage that stores all the classes that form the house:\r\n<ul>\r\n  <li>Rooms</li>\r\n  <li>Walls</li>\r\n  <li>Portals</li>\r\n  <li>Containers</li>\r\n</ul>\r\n\r\n#### Class Diagram\r\n![](https://raw.githubusercontent.com/cpe305/fall2016-project-hils124/master/Docs/ClassDiagramAbandoned.png)\r\n\r\n### abandoned.game\r\nPackage that stores all the game logic and the initial creation of the house itself.\r\n\r\n#### JSON Serialization\r\nThe house is built from a JSON file called *HouseData.json* which holds all the data for each room in the house. *HouseBuilder.java* reads this file in and serializes the information into a java object which it then returns.\r\n\r\n```java\r\nHouse house = mapper.readValue(new File(\"resources/HouseData.json\"), House.class);\r\n```\r\n\r\nThis house contains rooms, walls, portals, and containers that the player can now interact with.\r\n\r\n### abandoned.entities\r\nPackage that stores items and specific actions for each one.\r\n#### Item Actions\r\nItem actions are handled with Java enums found in *EntityUseType.java*. Each item has a parameter *useType* which holds an enum to indicate the item's action.\r\n<ul>\r\n  <li> keys -> <em>new KeyAction()</em></li>\r\n  <li> scissors -> <em>new ScissorsAction()</em></li>\r\n</ul>\r\n\r\nEach action class has a *use()* method that is specific to that item. This method is called by item's *use()* method.\r\n\r\n### abandoned.commands\r\nPackage that stores player commands and their specific actions\r\n#### Command Pattern\r\nPlayer actions are handled with the Command Pattern. There is a Command interface and multiple Command classes (such as SaveCommand, EnterCommand, etc...) that implement this interface.\r\n\r\n<em>Invoker.java</em> sets the current Command action to be run. The function for each specific command is located in <em>CommandProcessor.java</em>\r\n\r\n<hr>\r\n\r\n## Design Patterns\r\n### Singleton Pattern\r\nCreates one instance of a house and a player.\r\n  <li><em>GlobalHouse.java</em></li>\r\n  <li><em>GlobalPlayer.java</em></li>\r\n\r\n##### Benefits:\r\n  <li>All files able to access the current house and player</li>\r\n  <li>Avoids conflicting requests for the same resource</li>\r\n\r\n### Command Pattern\r\nAllows the requester of a particular command to be decoupled from the object that performs the command\r\n##### Related Classes:\r\n  <li><em>Invoker.java</em></li>\r\n  <li><em>Command.java</em></li>\r\n  <li><em>CommandProcessor.java</em></li>\r\n```java\r\n      Initialize.cmdProcess.setProcess(name);\r\n      switch (command) {\r\n        case \"describe\": {\r\n          Initialize.invoker.executeCommand(Initialize.describeCmd);\r\n          break;\r\n        }\r\n        case \"enter\": {\r\n          Initialize.invoker.executeCommand(Initialize.enterCmd);\r\n          break;\r\n        }\r\n        case \"inspect\": {\r\n          Initialize.invoker.executeCommand(Initialize.inspectCmd);\r\n          break;\r\n        }\r\n      }\r\n```\r\n##### Class Diagram\r\n![](https://github.com/cpe305/fall2016-project-hils124/blob/master/Docs/CommandPattern.png?raw=true)\r\n##### Benefits:\r\n  <li>Extensibility - can add new commands without changing existing code</li>\r\n  <li>Avoids conflicting requests for the same resource</li>\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}